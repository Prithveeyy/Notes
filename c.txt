Comments:
Use // for single-line comments.
Use /* */ for multi-line comments.

Basic Structure:

#include <stdio.h>
int main() {
    // code here
    return 0;
}

Variables:
Declare variables with a data type followed by the variable name.
Initialize variables at declaration if needed.

Data Types:
int, float, double, char are basic data types.
Use %d for integers, %f for floats, %lf for doubles, %c for characters in printf and scanf.

Input/Output:
printf() for output.
scanf() for input.
Include #include <stdio.h> for I/O functions.

Operators:
Arithmetic: +, -, *, /, %.
Relational: ==, !=, >, <, >=, <=.

Logical AND (&&):
Returns true if both conditions are true.
Example: if (x > 0 && x < 10)

Logical OR (||):
Returns true if at least one condition is true.
Example: if (x == 0 || x == 10)

Logical NOT (!):
Reverses the logical state of its condition.
Example: if (!(x > 0)) (This condition is true if x is not greater than 0)

if: Executes a block of code if a condition is true.

else if: Specifies a new condition if the previous one is false.

else: Executes a block of code if none of the previous conditions are true.

while loop:
Repeatedly executes a block of code as long as a specified condition is true.

do-while loop:
Similar to while loop but the condition is checked after executing the block of code, so the block is always executed at least once.

switch statement:
Used for multi-way branching based on the value of an expression.
Evaluates the expression once and compares the result to the values of constant expressions.
Provides an alternative to long chains of if-else if statements.

Functions:
Declare functions before main() or provide function prototypes.
Define functions after main().

Arrays:
Declare arrays with a fixed size or dynamically allocate memory.
Access elements using indexing (array[index]).

Strings:
Arrays of characters terminated by a null character '\0'.
Use string manipulation functions like strlen(), strcpy(), strcat(), etc.

Pointers:
Variables that store memory addresses.
Use & operator to get the address of a variable, * to dereference a pointer.

Memory Management:
malloc(), calloc(), realloc() for dynamic memory allocation.
free() to deallocate memory.

Structures:
Custom data types composed of other data types.
Access members using . operator.

File Handling:
fopen(), fclose() to open and close files.
fprintf(), fscanf() for file I/O.

Error Handling:
Check return values for error codes.
Use errno and perror() to display error messages.

strlwr - strring lower case 
strupe - strinf upper case
strcat - concat two strings together
strcpy - copy strn 1 to strn 2
strncpy - copy n cahraceters of strn 1 to strn 2.
strlen(): Returns the length of a string.
strncat(): Concatenates a certain number of characters from one string onto the end of another.
strcmp(): Compares two strings lexicographically.
strncmp(): Compares a certain number of characters of two strings.
strchr(): Finds the first occurrence of a character in a string.
strrchr(): Finds the last occurrence of a character in a string.
strstr(): Finds the first occurrence of a substring in a string.
strtok(): Tokenizes a string based on delimiters.
strdup(): Duplicates a string.
strchr(): Finds the first occurrence of a character in a string.
strrchr(): Finds the last occurrence of a character in a string.
memset(): Fills a block of memory with a particular value.
memcpy(): Copies a block of memory from one location to another.
memmove(): Moves a block of memory from one location to another, handling overlap.
